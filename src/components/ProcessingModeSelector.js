'use client';import React, { useState, useEffect } from 'react';import useProcessingMode from '../hooks/useProcessingMode';import scoreWorkerManager from '../utils/ScoreWorkerManager';import styles from '../styles/components/ProcessingModeSelector.module.css';/** * 処理モード設定用コンポーネント * スコア計算のWebWorker/メインスレッド切り替えなどができる */const ProcessingModeSelector = () => {  const { modes, changeMode } = useProcessingMode();  const [localModes, setLocalModes] = useState(modes);  const [isWebWorkerSupported, setIsWebWorkerSupported] = useState(true);  const [isSettingsSaved, setIsSettingsSaved] = useState(false);    // 初期化時にWebWorkerサポート状態を確認  useEffect(() => {    // workerサポート状況を確認    const isSupported = typeof Worker !== 'undefined' && typeof window !== 'undefined';    setIsWebWorkerSupported(isSupported && !scoreWorkerManager.fallbackMode);        // 処理モード変更イベントをリッスン    const handleProcessingModeChanged = (event) => {      // モードが強制変更された場合      if (event.detail?.forced) {        setIsWebWorkerSupported(false);        setLocalModes(prev => ({ ...prev, calculation: 'main-thread' }));                // 設定が強制的に変更されたことを通知        setIsSettingsSaved(true);                // フォールバック理由を含むメッセージを表示        const reason = event.detail?.reason || 'WebWorker初期化失敗';                // 通知を3秒後に消す        setTimeout(() => setIsSettingsSaved(false), 3000);      }    };        window.addEventListener('processingModeChanged', handleProcessingModeChanged);        return () => {      window.removeEventListener('processingModeChanged', handleProcessingModeChanged);    };  }, []);  // モード変更時にローカル状態を更新  useEffect(() => {    setLocalModes(modes);  }, [modes]);    // モード変更ハンドラ  const handleModeChange = (key, value) => {    // WebWorkerが非サポートで、workerモードを選択しようとした場合    if (key === 'calculation' && value === 'worker' &&         (!isWebWorkerSupported || scoreWorkerManager.fallbackMode)) {      // フォールバック情報があれば表示      const fallbackReason = scoreWorkerManager.fallbackReason || 'WebWorker非対応';      alert(`このブラウザはWebWorkerに対応していないか、初期化に失敗したため、メインスレッドモードのみ使用できます。\n\n理由: ${fallbackReason}`);      return;    }        const newModes = { ...localModes, [key]: value };    setLocalModes(newModes);        // モード変更を実行    const result = changeMode(newModes);        if (result) {      // 成功時の保存アニメーション表示      setIsSettingsSaved(true);      setTimeout(() => setIsSettingsSaved(false), 2000);            // WebWorker有効設定後は動作確認を実行      if (key === 'calculation' && value === 'worker' && isWebWorkerSupported) {        // WebWorkerの状態を確認（数秒後に表示更新）        setTimeout(() => {          if (scoreWorkerManager.fallbackMode) {            alert('WebWorkerを初期化しましたが、動作テスト中に問題が発生したため、メインスレッドモードに自動切替されました。');          }        }, 500);      }    } else {      // 失敗時の処理      alert('設定の変更に失敗しました。再度お試しください。');      // 元の設定に戻す      setLocalModes(modes);    }  };  return (    <div className={styles.container}>      <h3 className={styles.title}>処理モード設定</h3>            {isSettingsSaved && (        <div className={styles.savedNotification}>          {scoreWorkerManager.fallbackMode             ? 'WebWorker初期化に失敗したため、メインスレッドモードに自動切替されました'            : '設定が保存されました'}        </div>      )}            <div className={styles.modeSection}>        <h4>スコア計算</h4>        <div className={styles.modeOptions}>          <label className={`${styles.modeOption} ${(!isWebWorkerSupported || scoreWorkerManager.fallbackMode) ? styles.disabled : ''}`}>            <input              type="radio"              name="calculation"              value="worker"              checked={localModes.calculation === 'worker'}              onChange={() => handleModeChange('calculation', 'worker')}              disabled={!isWebWorkerSupported || scoreWorkerManager.fallbackMode}            />            WebWorker（推奨: 別スレッド処理）            {(!isWebWorkerSupported || scoreWorkerManager.fallbackMode) && (              <span className={styles.notSupported}>※ このブラウザでは非対応</span>            )}          </label>          <label className={styles.modeOption}>            <input              type="radio"              name="calculation"              value="main-thread"              checked={localModes.calculation === 'main-thread'}              onChange={() => handleModeChange('calculation', 'main-thread')}            />            メインスレッド          </label>        </div>      </div>            <div className={styles.modeSection}>        <h4>タイピング処理</h4>        <div className={styles.modeOptions}>          <label className={styles.modeOption}>            <input              type="radio"              name="typing"              value="main-thread"              checked={true}              disabled={true}            />            メインスレッド（固定）          </label>        </div>        <p className={styles.infoText}>タイピング処理は入力の即時性確保のためメインスレッド固定です</p>      </div>            <div className={styles.status}>        <div className={`${styles.statusDot} ${localModes.calculation === 'worker' && isWebWorkerSupported && !scoreWorkerManager.fallbackMode ? styles.active : styles.inactive}`} />        <span>WebWorkerステータス: {localModes.calculation === 'worker' && isWebWorkerSupported && !scoreWorkerManager.fallbackMode ? '有効' : '無効'}</span>      </div>            <p className={styles.info}>        WebWorkerでのスコア計算は、ゲーム中の計算負荷が高まっても画面の反応性が低下しません。        一部環境でWebWorkerが使用できない場合は自動的にメインスレッド処理に切り替わります。      </p>            {(!isWebWorkerSupported || scoreWorkerManager.fallbackMode) && (        <div className={styles.warning}>          <strong>注意:</strong> お使いのブラウザではWebWorkerが利用できないか、初期化に失敗しました。          メインスレッドモードのみ使用可能です。          <div className={styles.infoDetails}>            <details>              <summary>詳細情報</summary>              <ul>                <li>WebWorker API: {typeof Worker !== 'undefined' ? '✓ サポート' : '✗ 非サポート'}</li>                <li>フォールバック状態: {scoreWorkerManager.fallbackMode ? '有効（自動切替済み）' : '無効'}</li>                <li>詳細な診断は設定ページの「WebWorker診断」から実行できます</li>              </ul>            </details>          </div>        </div>      )}    </div>  );
};

export default ProcessingModeSelector;
